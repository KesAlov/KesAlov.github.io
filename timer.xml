<resources>

	<style name="AppTheme" parent="@android:style/Theme.Material.Light.DarkActionBar">
		<item name="android:colorPrimary">@color/colorPrimary</item>

		<item name="android:colorPrimaryDark">@color/colorPrimaryDark</item>

		<item name="android:colorAccent">@color/colorAccent</item>

		<item name="android:colorControlHighlight">@color/colorControlHighlight</item>

		<item name="android:colorControlNormal">@color/colorControlNormal</item>

	</style>

	<style name="FullScreen" parent="@android:style/Theme.Material.Light.NoActionBar.Fullscreen">

		<item name="android:colorPrimary">@color/colorPrimary</item>

		<item name="android:colorPrimaryDark">@color/colorPrimaryDark</item>

		<item name="android:colorAccent">@color/colorAccent</item>

		<item name="android:colorControlHighlight">@color/colorControlHighlight</item>

		<item name="android:colorControlNormal">@color/colorControlNormal</item>

	</style>

	<style name="NoActionBar" parent="@android:style/Theme.Material.Light.NoActionBar">

		<item name="android:colorPrimary">@color/colorPrimary</item>

		<item name="android:colorPrimaryDark">@color/colorPrimaryDark</item>

		<item name="android:colorAccent">@color/colorAccent</item>

		<item name="android:colorControlHighlight">@color/colorControlHighlight</item>

		<item name="android:colorControlNormal">@color/colorControlNormal</item>

	</style>

	<style name="NoStatusBar" parent="AppTheme">

		<item name="android:windowFullscreen">true</item>

	</style>

</resources>

<resources>

	<color name="colorPrimary">#008DCD</color>
	<color name="colorPrimaryDark">#0084C2</color>

	<color name="colorAccent">#008DCD</color>

	<color name="colorControlHighlight">#008DCD</color>

	<color name="colorControlNormal">#57BEEE</color>

</resources>

<resources>

	<string name="app_name" translatable="false">timer</string>
</resources>

package org.KesAlov.timer;



import android.app.Activity;

import android.app.*;

import android.os.*;

import android.view.*;

import android.view.View.*;

import android.widget.*;

import android.content.*;

import android.content.res.*;

import android.graphics.*;

import android.graphics.drawable.*;

import android.media.*;

import android.net.*;

import android.text.*;

import android.text.style.*;

import android.util.*;

import android.webkit.*;

import android.animation.*;

import android.view.animation.*;

import java.util.*;

import java.util.regex.*;

import java.text.*;

import org.json.*;

import android.widget.LinearLayout;

import android.widget.Button;

import android.content.SharedPreferences;

import android.content.Intent;

import android.net.Uri;

import android.view.View;

import android.app.Fragment;

import android.app.FragmentManager;

import android.app.DialogFragment;





public class DatandtimeActivity extends Activity {

	
	private double variable = 0;

	

	private LinearLayout linear1;

	private TimePicker timepicker1;

	private DatePicker datepicker1;

	private Button button3;

	private Button button4;

	private Button button5;

	private Button button6;

	

	private SharedPreferences save;

	private Intent tosecmer = new Intent();

	private Intent tomain = new Intent();

	private Intent totimer = new Intent();

	

	@Override

	protected void onCreate(Bundle _savedInstanceState) {

		super.onCreate(_savedInstanceState);

		setContentView(R.layout.datandtime);

		initialize(_savedInstanceState);

		initializeLogic();

	}

	

	private void initialize(Bundle _savedInstanceState) {

		linear1 = (LinearLayout) findViewById(R.id.linear1);

		timepicker1 = (TimePicker) findViewById(R.id.timepicker1);

		datepicker1 = (DatePicker) findViewById(R.id.datepicker1);

		button3 = (Button) findViewById(R.id.button3);

		button4 = (Button) findViewById(R.id.button4);

		button5 = (Button) findViewById(R.id.button5);

		button6 = (Button) findViewById(R.id.button6);

		save = getSharedPreferences("save", Activity.MODE_PRIVATE);

		

		timepicker1.setOnTimeChangedListener(new TimePicker.OnTimeChangedListener() {

			@Override

			public void onTimeChanged(TimePicker _timePicker, int _hour, int _minute) {

				save.edit().putString("hour", String.valueOf((long)(_hour))).commit();

				save.edit().putString("minute", String.valueOf((long)(_minute))).commit();

			}

		});

		

		Calendar _calendar = Calendar.getInstance();

		datepicker1.init(_calendar.get(Calendar.YEAR),

		_calendar.get(Calendar.MONTH), _calendar.get(Calendar.DAY_OF_MONTH), new DatePicker.OnDateChangedListener() {

			@Override

			public void onDateChanged(DatePicker _datePicker, int _year, int _month, int _day) {

				save.edit().putString("year", String.valueOf((long)(_year))).commit();

				save.edit().putString("moth", String.valueOf((long)(_month))).commit();

				save.edit().putString("day", String.valueOf((long)(_day))).commit();

			}

		});

		

		button3.setOnClickListener(new View.OnClickListener() {

			@Override

			public void onClick(View _view) {

				tomain.setClass(getApplicationContext(), MainActivity.class);

				startActivity(tomain);

				finish();

			}

		});

		

		button4.setOnClickListener(new View.OnClickListener() {

			@Override

			public void onClick(View _view) {

				tosecmer.setClass(getApplicationContext(), TimerActivity.class);

				startActivity(tosecmer);

				finish();

			}

		});

		

		button5.setOnClickListener(new View.OnClickListener() {

			@Override

			public void onClick(View _view) {

				totimer.setClass(getApplicationContext(), TaumerActivity.class);

				startActivity(totimer);

				finish();

			}

		});

		

		button6.setOnClickListener(new View.OnClickListener() {

			@Override

			public void onClick(View _view) {

				

			}

		});

	}

	

	private void initializeLogic() {

		if (save.getString("hour", "").equals("")) {

			timepicker1.setHour((int)Double.parseDouble(save.getString("hour", "")));

		}

		else {

			timepicker1.setHour((int)Double.parseDouble(save.getString("hour", "")));

		}

		if (save.getString("minute", "").equals("")) {

			timepicker1.setMinute((int)Double.parseDouble(save.getString("munite", "")));

		}

		else {

			timepicker1.setMinute((int)Double.parseDouble(save.getString("munite", "")));

		}

	}

	

	@Override

	protected void onActivityResult(int _requestCode, int _resultCode, Intent _data) {

		super.onActivityResult(_requestCode, _resultCode, _data);

		switch (_requestCode) {

			

			default:

			break;

		}

	}

	

	@Deprecated

	public void showMessage(String _s) {

		Toast.makeText(getApplicationContext(), _s, Toast.LENGTH_SHORT).show();

	}

	

	@Deprecated

	public int getLocationX(View _v) {

		int _location[] = new int[2];

		_v.getLocationInWindow(_location);

		return _location[0];

	}

	

	@Deprecated

	public int getLocationY(View _v) {

		int _location[] = new int[2];

		_v.getLocationInWindow(_location);

		return _location[1];

	}

	

	@Deprecated

	public int getRandom(int _min, int _max) {

		Random random = new Random();

		return random.nextInt(_max - _min + 1) + _min;

	}

	

	@Deprecated

	public ArrayList<Double> getCheckedItemPositionsToArray(ListView _list) {

		ArrayList<Double> _result = new ArrayList<Double>();

		SparseBooleanArray _arr = _list.getCheckedItemPositions();

		for (int _iIdx = 0; _iIdx < _arr.size(); _iIdx++) {

			if (_arr.valueAt(_iIdx))

			_result.add((double)_arr.keyAt(_iIdx));

		}

		return _result;

	}

	

	@Deprecated

	public float getDip(int _input) {

		return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, _input, getResources().getDisplayMetrics());

	}

	

	@Deprecated

	public int getDisplayWidthPixels() {

		return getResources().getDisplayMetrics().widthPixels;

	}

	

	@Deprecated

	public int getDisplayHeightPixels() {

		return getResources().getDisplayMetrics().heightPixels;

	}

}

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent" android:layout_height="match_parent" android:orientation="vertical">

<LinearLayout android:id="@+id/linear1" android:layout_width="match_parent" android:layout_height="match_parent" android:padding="8dp" android:orientation="vertical">

<LinearLayout android:id="@+id/linear2" android:layout_width="match_parent" android:layout_height="wrap_content" android:padding="8dp" android:orientation="horizontal">

<Button android:id="@+id/button1" android:layout_width="wrap_content" android:layout_height="wrap_content" android:padding="8dp" android:text="Время" android:textSize="12sp" android:textColor="#000000"/>

<Button android:id="@+id/button2" android:layout_width="wrap_content" android:layout_height="wrap_content" android:padding="8dp" android:text="Таймер" android:textSize="12sp" android:textColor="#000000"/>

<Button android:id="@+id/button3" android:layout_width="wrap_content" android:layout_height="wrap_content" android:padding="8dp" android:text="Секундомер" android:textSize="12sp" android:textColor="#000000"/>

<Button android:id="@+id/button4" android:layout_width="wrap_content" android:layout_height="wrap_content" android:padding="8dp" android:text="Дата и время" android:textSize="12sp" android:textColor="#000000"/>

</LinearLayout>

<LinearLayout android:id="@+id/linear3" android:layout_width="match_parent" android:layout_height="match_parent" android:padding="8dp" android:orientation="vertical">

<LinearLayout android:id="@+id/linear4" android:layout_width="match_parent" android:layout_height="match_parent" android:padding="8dp" android:gravity="center_horizontal|center_vertical" android:orientation="vertical">

<AnalogClock android:id="@+id/analogclock2" android:layout_width="wrap_content" android:layout_height="wrap_content" android:padding="8dp"/>

<DigitalClock android:id="@+id/digitalclock2" android:layout_width="wrap_content" android:layout_height="wrap_content" android:padding="8dp"/>

</LinearLayout>

</LinearLayout>

</LinearLayout>

</LinearLayout>
